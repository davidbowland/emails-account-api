AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API for email accounts

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      certificate: adce1a21-90b4-4120-8548-111215e582f0
      domain: emails-account-api.dbowland.com
      logStreamFunction: log-subscriber
      table: emails-account-api
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificate: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      domain: emails-account-api.bowland.link
      logStreamFunction: log-subscriber-test
      table: emails-account-api-test
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Auth:
        ApiKeyRequired: true # sets for all methods
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for emails-account-api
      Domain:
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
        BasePath:
          - /v1

  # Lambda

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/delete-item.deleteByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: emails-account-api delete by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref AccountsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: delete
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'

  DeleteItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: DeleteItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteItemFunction}
      RetentionInDays: 30

  DeleteItemLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref DeleteItemLogGroup

  GetAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-all-items.getAllItemsHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: emails-account-api get all items
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref AccountsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetAllItemsFunction}
      RetentionInDays: 30

  GetAllItemsLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetAllItemsLogGroup

  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-by-id.getByIdHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: emails-account-api get by ID
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref AccountsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: get
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'

  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: GetByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetByIdFunction}
      RetentionInDays: 30

  GetByIdLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref GetByIdLogGroup

  PatchItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/patch-item.patchItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: emails-account-api patch item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref AccountsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: patch
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'

  PatchLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PatchItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PatchItemFunction}
      RetentionInDays: 30

  PatchGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PatchLogGroup

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/put-item.putItemHandler
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: emails-account-api put item
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref AccountsTable
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /accounts/{accountId}
            Method: put
            Auth:
              ApiKeyRequired: true
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'

  PutLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PutItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutItemFunction}
      RetentionInDays: 30

  PutGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PutLogGroup

  # DynamoDB

  AccountsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Account
        Type: String
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, table]
      Tags:
        'created-by': 'emails-account-api'
        'created-for': 'emails'
